{"version":3,"sources":["components/CategoryAdd.tsx","components/GridGifItem.tsx","helpers/getGifs.tsx","components/GifGrid.tsx","hooks/useFetchGifs.tsx","GifExpertApp.tsx","index.tsx"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","item","type","value","onChange","target","GridGifItem","title","url","id","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"mLAOaA,EAAc,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACE,uBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,SACbP,GAAc,SAACQ,GAAD,OAAWN,GAAX,mBAA0BM,OACxCL,EAAc,MAIhB,UACE,6BAAKD,IACL,uBAAOO,KAAK,OAAOC,MAAOR,EAAYS,SAbrB,SAACN,GACpBF,EAAcE,EAAEO,OAAOF,c,QCTdG,EAAc,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,GACxC,OACE,sBAAKC,UAAU,OAAf,UACE,6BAAKH,IACL,qBAAKI,IAAKH,EAAKI,IAAI,OAFMH,I,uBCJlBI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfP,EADe,iDACiCQ,UACpDF,GAFmB,+DAIEG,MAAMT,GAJR,cAIfU,EAJe,gBAKEA,EAASC,OALX,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAc,IAAD,EAClC,MAAO,CACLd,GAAIc,EAAId,GACRF,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIC,cAAN,aAAE,EAAYC,iBAAiBjB,QAXjB,kBAeda,GAfc,4CAAH,sDCQPK,EAAU,SAAC,GAA6B,IAA3BZ,EAA0B,EAA1BA,SACxB,ECP0B,SAACA,GAC3B,MAA0BpB,mBAA+C,CACvE0B,KAAM,GACNO,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OANAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACR,GACtBM,EAAS,CAAET,KAAMG,EAAKI,SAAS,SAEhC,CAACb,IAEGc,EDL2BI,CAAalB,GAAjCU,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QAEtB,OACE,qCACE,6BAAKb,IAEJa,GAAW,cACZ,qBAAKjB,UAAU,oDAAf,SACGc,EAAOF,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAId,aEd1BwB,EAAe,WAC1B,MAAoCvC,mBAAS,CAAC,gBAA9C,mBAAOwC,EAAP,KAAmBzC,EAAnB,KAEA,OACE,qCACE,+CACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,8BACGyC,EAAWZ,KAAI,SAACR,EAAUqB,GACzB,OAAO,cAAC,EAAD,CAAsCrB,SAAUA,GAAhD,UAAiBA,EAAjB,YAA6BqB,a,MCX9CC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.f9f67cb9.chunk.js","sourcesContent":["import React, { FormEvent, Dispatch, SetStateAction, useState } from 'react';\ntype Dispatcher<S> = Dispatch<SetStateAction<S>>;\n\ninterface IProps {\n  setCategories: Dispatcher<string[]>;\n}\n\nexport const CategoryAdd = ({ setCategories }: IProps) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleChange = (e: any) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    if (inputValue.trim()) {\n      setCategories((item) => [inputValue, ...item]);\n      setInputValue('');\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>{inputValue}</h2>\n      <input type='text' value={inputValue} onChange={handleChange} />\n    </form>\n  );\n};\n","import { IGiftImage } from '../interfaces/gif.interface';\n\nexport const GridGifItem = ({ title, url, id }: IGiftImage) => {\n  return (\n    <div className='card' key={id}>\n      <h2>{title}</h2>\n      <img src={url} alt='' />\n    </div>\n  );\n};\n","export const getGifs = async (category: string) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&api_key=NTzkwVI55MDAK0AlZdzb2AVUmORkYf3z&limit=10`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  const gifs = data.map((img: any) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import { GridGifItem } from './GridGifItem';\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\ninterface IGifProps {\n  category: string;\n}\n\nexport const GifGrid = ({ category }: IGifProps) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n\n      {loading && 'Cargando...'}\n      <div className='card-grid animate__animated animate__fadeInRight '>\n        {images.map((img: any) => {\n          return <GridGifItem key={img.id} {...img} />;\n        })}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\nexport const useFetchGifs = (category: string) => {\n  const [state, setState] = useState<{ data: number[]; loading: boolean }>({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((img) => {\n      setState({ data: img, loading: false });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport { CategoryAdd } from './components/CategoryAdd';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Dragon Ball']);\n\n  return (\n    <>\n      <h2>GiftExpertApp</h2>\n      <hr />\n\n      <CategoryAdd setCategories={setCategories} />\n\n      <div>\n        {categories.map((category, index) => {\n          return <GifGrid key={`${category}-${index}`} category={category} />;\n        })}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}